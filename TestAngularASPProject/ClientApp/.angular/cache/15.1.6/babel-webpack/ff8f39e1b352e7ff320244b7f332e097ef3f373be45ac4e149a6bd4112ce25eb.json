{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class HomeComponent {\n  constructor() {\n    this.items = ['a', 'b', 'c', 'd', 'e'];\n    this.log();\n  }\n  log() {\n    if (this.items.length) {\n      this.items.forEach(item => window.console.log(item));\n    }\n  }\n}\nHomeComponent.ɵfac = function HomeComponent_Factory(t) {\n  return new (t || HomeComponent)();\n};\nHomeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: HomeComponent,\n  selectors: [[\"app-home\"]],\n  decls: 353,\n  vars: 44,\n  consts: [[\"href\", \"#home\"], [\"href\", \"#application-entry-point\"], [\"href\", \"#weatherforecast-controllers-classes\"], [\"href\", \"#angular-client-files\"], [\"href\", \"#typescript-intro\"], [\"href\", \"#typescript-decorators\"], [\"href\", \"#custom-selectors\"], [\"href\", \"#data-binding-basics\"], [\"href\", \"#understanding-ngmodule\"], [\"id\", \"home\", 1, \"py-4\"], [\"href\", \"https://get.asp.net/\"], [\"href\", \"https://msdn.microsoft.com/en-us/library/67ef8sbd.aspx\"], [\"href\", \"https://angular.io/\"], [\"href\", \"http://www.typescriptlang.org/\"], [\"href\", \"http://getbootstrap.com/\"], [\"id\", \"application-entry-point\", 1, \"py-4\"], [1, \"break-lines\"], [\"id\", \"weatherforecast-controllers-classes\", 1, \"py-4\"], [\"href\", \"/fetch-data\"], [\"href\", \"/counter\"], [\"id\", \"angular-client-files\", 1, \"py-4\"], [\"id\", \"typescript-intro\", 1, \"py-4\"], [\"id\", \"typescript-decorators\", 1, \"py-4\"], [\"id\", \"custom-selectors\", 1, \"py-4\"], [\"id\", \"data-binding-basics\", 1, \"py-4\"], [1, \"code\", \"break-lines\"], [\"id\", \"understanding-ngmodule\", 1, \"py-4\"], [1, \"mb-0\"]],\n  template: function HomeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h1\");\n      i0.ɵɵtext(1, \"Notes:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"ol\")(3, \"li\")(4, \"a\", 0);\n      i0.ɵɵtext(5, \"Hello, world\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(6, \"li\")(7, \"a\", 1);\n      i0.ɵɵtext(8, \"App entry-point\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(9, \"li\")(10, \"a\", 2);\n      i0.ɵɵtext(11, \"Weatherforecast Controllers and Classes\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(12, \"li\")(13, \"a\", 3);\n      i0.ɵɵtext(14, \"Understanding the Angular Client App Files\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(15, \"li\")(16, \"a\", 4);\n      i0.ɵɵtext(17, \"Typescript Intro\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(18, \"li\")(19, \"a\", 5);\n      i0.ɵɵtext(20, \"Typescript Decorators\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(21, \"li\")(22, \"a\", 6);\n      i0.ɵɵtext(23, \"Creating Custom Selectors\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(24, \"li\")(25, \"a\", 7);\n      i0.ɵɵtext(26, \"Data-binding Basics\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(27, \"li\")(28, \"a\", 8);\n      i0.ɵɵtext(29, \"Understanding \");\n      i0.ɵɵelementStart(30, \"code\");\n      i0.ɵɵtext(31, \"@NgModule\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(32, \" Decorator\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelement(33, \"hr\");\n      i0.ɵɵelementStart(34, \"div\", 9)(35, \"h1\");\n      i0.ɵɵtext(36, \"Hello, world!\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(37, \"p\");\n      i0.ɵɵtext(38, \"Welcome to your new single-page application, built with:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(39, \"ul\")(40, \"li\")(41, \"a\", 10);\n      i0.ɵɵtext(42, \"ASP.NET Core\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(43, \" and \");\n      i0.ɵɵelementStart(44, \"a\", 11);\n      i0.ɵɵtext(45, \"C#\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(46, \" for cross-platform server-side code\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(47, \"li\")(48, \"a\", 12);\n      i0.ɵɵtext(49, \"Angular\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(50, \" and \");\n      i0.ɵɵelementStart(51, \"a\", 13);\n      i0.ɵɵtext(52, \"TypeScript\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(53, \" for client-side code\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(54, \"li\")(55, \"a\", 14);\n      i0.ɵɵtext(56, \"Bootstrap\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(57, \" for layout and styling\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(58, \"p\");\n      i0.ɵɵtext(59, \"To help you get started, we've also set up:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(60, \"ul\")(61, \"li\")(62, \"strong\");\n      i0.ɵɵtext(63, \"Client-side navigation\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(64, \". For example, click \");\n      i0.ɵɵelementStart(65, \"em\");\n      i0.ɵɵtext(66, \"Counter\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(67, \" then \");\n      i0.ɵɵelementStart(68, \"em\");\n      i0.ɵɵtext(69, \"Back\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(70, \" to return here.\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(71, \"li\")(72, \"strong\");\n      i0.ɵɵtext(73, \"Angular CLI integration\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(74, \". In development mode, there's no need to run \");\n      i0.ɵɵelementStart(75, \"code\");\n      i0.ɵɵtext(76, \"ng serve\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(77, \". It runs in the background automatically, so your client-side resources are dynamically built on demand and the page refreshes when you modify any file.\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(78, \"li\")(79, \"strong\");\n      i0.ɵɵtext(80, \"Efficient production builds\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(81, \". In production mode, development-time features are disabled, and your \");\n      i0.ɵɵelementStart(82, \"code\");\n      i0.ɵɵtext(83, \"dotnet publish\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(84, \" configuration automatically invokes \");\n      i0.ɵɵelementStart(85, \"code\");\n      i0.ɵɵtext(86, \"ng build\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(87, \" to produce minified, ahead-of-time compiled JavaScript files.\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(88, \"p\");\n      i0.ɵɵtext(89, \"The \");\n      i0.ɵɵelementStart(90, \"code\");\n      i0.ɵɵtext(91, \"ClientApp\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(92, \" subdirectory is a standard Angular CLI application. If you open a command prompt in that directory, you can run any \");\n      i0.ɵɵelementStart(93, \"code\");\n      i0.ɵɵtext(94, \"ng\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(95, \" command (e.g., \");\n      i0.ɵɵelementStart(96, \"code\");\n      i0.ɵɵtext(97, \"ng test\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(98, \"), or use \");\n      i0.ɵɵelementStart(99, \"code\");\n      i0.ɵɵtext(100, \"npm\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(101, \" to install extra packages into it.\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(102, \"hr\");\n      i0.ɵɵelementStart(103, \"div\", 15)(104, \"h1\")(105, \"code\");\n      i0.ɵɵtext(106, \"Program.cs\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(107, \"p\");\n      i0.ɵɵtext(108, \" This file basically serves as the configuration of the ASP.NET Core backend. The formal definition of the significance of this file is as follows: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(109, \"p\");\n      i0.ɵɵtext(110, \" The \");\n      i0.ɵɵelementStart(111, \"b\");\n      i0.ɵɵtext(112, \"Program.cs\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(113, \" file in an ASP.NET Core Angular app is a central part of the application startup process. It contains the code responsible for configuring and building the web app, as well as setting up the HTTP request pipeline. Let's breakdown the significance of the code in this file in its barest form. \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(114, \"code\");\n      i0.ɵɵtext(115, \"var builder = WebApplication.CreateBuilder(args);\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(116, \"p\");\n      i0.ɵɵtext(117, \" This line creates a new \");\n      i0.ɵɵelementStart(118, \"b\");\n      i0.ɵɵtext(119, \"WebApplicationBuilder\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(120, \" instance using the \");\n      i0.ɵɵelementStart(121, \"b\");\n      i0.ɵɵtext(122, \"WebApplication.CreateBuilder\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(123, \" method. The builder is used to configure and set up the application services, middleware and other components. \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(124, \"code\");\n      i0.ɵɵtext(125, \"builder.Services.AddControllersWithViews();\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(126, \"p\");\n      i0.ɵɵtext(127, \" This line adds services to MVC (Model-View-Controller) to the dependency injection container. It prepares the app to handle controllers and views, which are essential for serving web pages and processing user requests. \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(128, \"code\");\n      i0.ɵɵtext(129, \"var app = builder.Build()\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(130, \"p\");\n      i0.ɵɵtext(131, \" This line builds the web application using the configuration and services defined in the builder container. It creates an instance of \");\n      i0.ɵɵelementStart(132, \"b\");\n      i0.ɵɵtext(133, \"WebApplication\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(134, \" class, which represents the running web app. \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(135, \"code\", 16);\n      i0.ɵɵtext(136);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(137, \"p\");\n      i0.ɵɵtext(138, \" This block of code checks wether the app is running in a non-development environment. If not in development, the app forces HTTP Strict Transport Security (HSTS) by adding the \");\n      i0.ɵɵelementStart(139, \"b\");\n      i0.ɵɵtext(140, \"UseHsts\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(141, \" middleware. HSTS helps ensure secure communication by telling browsers to only use HTTPS for future requests. \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(142, \"code\", 16);\n      i0.ɵɵtext(143, \"\\n        app.UseHttpsRedirection();\\n        app.UseStaticFiles();\\n        app.UseRouting();\\n    \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(144, \"p\");\n      i0.ɵɵtext(145, \"These lines of code add various middleware components to the HTTP request pipline:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(146, \"ul\")(147, \"li\")(148, \"b\");\n      i0.ɵɵtext(149, \"UseHttpsRedirection\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(150, \": Redirects HTTP requests to HTTPS to ensure secure comms.\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(151, \"li\")(152, \"b\");\n      i0.ɵɵtext(153, \"UseStaticFiles\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(154, \": Enables the ability to serve static files (HTML, CSS, JS) from the \");\n      i0.ɵɵelementStart(155, \"b\");\n      i0.ɵɵtext(156, \"wwwroot\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(157, \" directory. \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(158, \"li\")(159, \"b\");\n      i0.ɵɵtext(160, \"UseRouting\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(161, \": Sets up routing for incoming requests based on URL paths.\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(162, \"code\", 16);\n      i0.ɵɵtext(163);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(164, \"p\");\n      i0.ɵɵtext(165, \" This line configures the default route for MVC controllers. It maps incoming requests to specific controller actions based on the URL structure. The \");\n      i0.ɵɵelementStart(166, \"b\");\n      i0.ɵɵtext(167, \"default\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(168, \" route specifies that requests without explicit controller and action segments should be routed to the \");\n      i0.ɵɵelementStart(169, \"b\");\n      i0.ɵɵtext(170, \"Index\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(171, \" action of the default controller. \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(172, \"code\");\n      i0.ɵɵtext(173, \" app.MapFallbackToFile(\\\"index.html\\\"); \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(174, \"p\");\n      i0.ɵɵtext(175, \" This line sets up a fallback that serves the \");\n      i0.ɵɵelementStart(176, \"b\");\n      i0.ɵɵtext(177, \"index.html\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(178, \" file for all unmatched requests. This is especially useful for SPAs like Angular apps, where the frontend handles routing internally. The \");\n      i0.ɵɵelementStart(179, \"b\");\n      i0.ɵɵtext(180, \"index.html\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(181, \" file usually contains the Angular app and its logic. \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(182, \"code\");\n      i0.ɵɵtext(183, \"app.Run();\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(184, \"p\");\n      i0.ɵɵtext(185, \" This line starts the web application and enters the main event loop to listen for incoming requests and process them based on the configured middleware pipeline. \");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(186, \"div\", 17)(187, \"h1\");\n      i0.ɵɵtext(188, \"Weatherforecast Contollers and Classes\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(189, \"p\");\n      i0.ɵɵtext(190, \" The HTML of the \");\n      i0.ɵɵelementStart(191, \"a\", 18);\n      i0.ɵɵtext(192, \"/fetch-data\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(193, \" page is rendered by Angular. The \");\n      i0.ɵɵelementStart(194, \"code\");\n      i0.ɵɵtext(195, \"WeatherForecast\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(196, \" class is used by the contoller \");\n      i0.ɵɵelementStart(197, \"code\");\n      i0.ɵɵtext(198, \"WeatherForecastController#Get\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(199, \". It is basically acting as a DTO. \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(200, \"p\");\n      i0.ɵɵtext(201, \"It is worth noting that there are two attributes to the \");\n      i0.ɵɵelementStart(202, \"code\");\n      i0.ɵɵtext(203, \"WeatherForecastController\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(204, \" class:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(205, \"ul\")(206, \"li\")(207, \"code\");\n      i0.ɵɵtext(208, \"[ApiController]\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(209, \": For external usage, so that another project (like the angular client) can connect to it. \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(210, \"li\")(211, \"code\");\n      i0.ɵɵtext(212, \"[Route(\\\"[controller]\\\")]\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(213, \"p\");\n      i0.ɵɵtext(214, \" Note that the \");\n      i0.ɵɵelementStart(215, \"a\", 18);\n      i0.ɵɵtext(216, \"Fetch Data\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(217, \" and \");\n      i0.ɵɵelementStart(218, \"a\", 19);\n      i0.ɵɵtext(219, \"Counter\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(220, \" pages are not shown in the \");\n      i0.ɵɵelementStart(221, \"code\");\n      i0.ɵɵtext(222, \"Pages\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(223, \" directory. Those pages are handled by Angular and served from HTML files. When we created this project we essentially created the ASP.NET v7.0 back-end server application and also the Angular front-end client application which lives in \");\n      i0.ɵɵelementStart(224, \"code\");\n      i0.ɵɵtext(225, \"ClientApp\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(226, \" folder. \");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(227, \"div\", 20)(228, \"h1\");\n      i0.ɵɵtext(229, \"Understanding the Angular Client Files\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(230, \"p\")(231, \"code\");\n      i0.ɵɵtext(232, \"ClientApp/src\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(233, \" is where the Angular source code files for the client application live. The shell container HTML is found in \");\n      i0.ɵɵelementStart(234, \"code\");\n      i0.ɵɵtext(235, \"ClientApp/src/index.html\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(236, \". This is where everything is rendered, in this file in the \");\n      i0.ɵɵelementStart(237, \"code\");\n      i0.ɵɵtext(238, \"app-root\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(239, \" element. \");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(240, \"div\", 21)(241, \"h1\");\n      i0.ɵɵtext(242, \"Typescript Introduction\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(243, \"p\");\n      i0.ɵɵtext(244, \" When analyzing the components of the Angular client application we begin to notice a few things. One of those noticeable things is the fact that \");\n      i0.ɵɵelementStart(245, \"code\");\n      i0.ɵɵtext(246, \"ClientApp/src/app/home/home.component.ts\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(247, \" is a Typescript file. This means that the home component is written in Typescript. \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(248, \"p\");\n      i0.ɵɵtext(249, \" Angular uses Typescript by default for developing client applications. Typescript is transpiled to Javascript in order to be interpretable by web browsers. Browsers by default run a Javascript engine. So they can interpret JS by default. \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(250, \"p\");\n      i0.ɵɵtext(251, \" Javascript itself is a dynamically typed language. It checks for types at runtime. Typescript in the other-hand is is a superset of Javascript featuring full type support and type safety/tooling. Typescript file extensions end in \");\n      i0.ɵɵelementStart(252, \"code\");\n      i0.ɵɵtext(253, \"app.component\");\n      i0.ɵɵelementStart(254, \"b\");\n      i0.ɵɵtext(255, \".ts\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtext(256, \". \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(257, \"p\");\n      i0.ɵɵtext(258, \"Typescript was created by Microsoft and has similarities to C#. Example Typescript class:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(259, \"code\", 16);\n      i0.ɵɵtext(260);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(261, \"h1\");\n      i0.ɵɵtext(262, \"Defining Methods in Typescript\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(263, \"code\", 16);\n      i0.ɵɵtext(264);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(265, \"code\", 16);\n      i0.ɵɵtext(266, \"\\n        var a: string\\n        var b: number\\n        var c: boolean\\n    \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(267, \"p\");\n      i0.ɵɵtext(268, \"Built in Typescript Primitive Types are number, string and boolean.\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(269, \"code\");\n      i0.ɵɵtext(270, \"var app : AppComponent = new AppComponent();\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(271, \"p\");\n      i0.ɵɵtext(272, \"You can also have variables of type class.\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(273, \"code\", 16);\n      i0.ɵɵtext(274, \"\\n        var a : number[]\\n        var b : string[]\\n        var c : boolean[]\\n        var app : AppComponent[]\\n    \");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(275, \"div\", 22)(276, \"h1\");\n      i0.ɵɵtext(277, \"Typescript Decorators\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(278, \"code\", 16);\n      i0.ɵɵtext(279);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(280, \"p\");\n      i0.ɵɵtext(281, \" The above Typescript class has a component decorator. Angular uses Typescript decorators kind of like attributes in C#. \");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(282, \"div\", 23)(283, \"h1\");\n      i0.ɵɵtext(284, \"Custom Selectors\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(285, \"p\");\n      i0.ɵɵtext(286, \"Angular lets you create custom selectors for use in your templates/components.\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(287, \"code\", 16);\n      i0.ɵɵtext(288, \"\\n        body -> app-root -> [app-nav, container -> router-outlet]\\n    \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(289, \"p\");\n      i0.ɵɵtext(290, \"Angular is replacing the custom tag elements with the templates they point to.\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(291, \"div\", 24)(292, \"h1\");\n      i0.ɵɵtext(293, \"Data-binding Basics\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(294, \"p\");\n      i0.ɵɵtext(295, \"There are two types of data-binding when working with Angular components:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(296, \"h1\");\n      i0.ɵɵtext(297, \"One-way Data-binding\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(298, \"code\", 16);\n      i0.ɵɵtext(299);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(300, \"code\", 25);\n      i0.ɵɵtext(301);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(302, \"p\");\n      i0.ɵɵtext(303, \"We can define a property on the exported component class and then render it in the component's template HTML using double curly braces.\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(304, \"h1\");\n      i0.ɵɵtext(305, \"Event-binding\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(306, \"code\", 16);\n      i0.ɵɵtext(307);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(308, \"p\");\n      i0.ɵɵtext(309, \"Here we see defined a public method \");\n      i0.ɵɵelementStart(310, \"code\");\n      i0.ɵɵtext(311, \"updateMessage\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(312, \" that changes the value of \");\n      i0.ɵɵelementStart(313, \"code\");\n      i0.ɵɵtext(314, \"favoriteFood\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(315, \" to random new value.\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(316, \"code\", 16);\n      i0.ɵɵtext(317, \"\\n    <!-- the-component.component.html -->\\n    <h1>Page Title</h1>\\n    <button class=\\\"btn btn-primary\\\" (click)=\\\"updateMessage\\\">\\n        Update Food\\n    <button/>\\n    \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(318, \"p\");\n      i0.ɵɵtext(319, \"Here we see the event method bound to a button element on the template. When the event is triggered on the button element the method is invoked.\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(320, \"div\", 26)(321, \"h1\");\n      i0.ɵɵtext(322, \"Understanding \");\n      i0.ɵɵelementStart(323, \"code\");\n      i0.ɵɵtext(324);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(325, \" Decorator\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(326, \"code\", 16);\n      i0.ɵɵtext(327);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(328, \"p\");\n      i0.ɵɵtext(329, \" There are several fields that can be used to configure and customize the behavior of a module. The fields in this decorator provide control over services, components and other features used in this decorator. \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(330, \"ul\")(331, \"li\")(332, \"p\", 27)(333, \"b\");\n      i0.ɵɵtext(334, \"Declarations\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(335, \"p\");\n      i0.ɵɵtext(336, \"Used to declare components, directives and pipes that belong to the module. These declarations make items available for use within the module.\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(337, \"li\")(338, \"p\", 27)(339, \"b\");\n      i0.ɵɵtext(340, \"Imports\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(341, \"p\");\n      i0.ɵɵtext(342, \"Specifies other modules who's exported components, directives, or services are required by components in this module.\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(343, \"li\")(344, \"p\", 27);\n      i0.ɵɵtext(345, \"Providers\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(346, \"p\");\n      i0.ɵɵtext(347, \"Used to configure the dependency injection system with a list of services that the module should provide. These services are made available throughout the application.\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(348, \"li\")(349, \"p\", 27)(350, \"b\");\n      i0.ɵɵtext(351, \"Bootstrap\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(352, \"p\");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(136);\n      i0.ɵɵtextInterpolate2(\"\\n        if (!app.Environment.IsDevelopment())\\n        \", \"{\", \"\\n        app.useHsts();\\n        \", \"}\", \"\\n    \");\n      i0.ɵɵadvance(27);\n      i0.ɵɵtextInterpolate6(\"\\n        app.MapControllerRoute(\\n        name: \\\"default\\\",\\n        pattern: \\\"\", \"{\", \"controller\", \"}\", \"/\", \"{\", \"action=Index\", \"}\", \"/\", \"{\", \"id?\", \"}\", \"\\\"\\n        );\\n    \");\n      i0.ɵɵadvance(97);\n      i0.ɵɵtextInterpolate2(\"\\n        export class AppComponent \", \"{\", \"\\n        title: string = 'app'; // type definition with default value (automatic type inference)\\n        items = ['item1', 'item2', 'item3'];\\n        \", \"}\", \"\\n    \");\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate4(\"\\n        export class AppComponent \", \"{\", \"\\n        private log(text: string) \", \"{\", \" // methods are public in Typescript by default\\n        // type definition is optional due to automatic type inference\\n        var message: string = 'Message ' + text; // usage of parameter\\n        \", \"}\", \"\\n        \", \"}\", \"\\n    \");\n      i0.ɵɵadvance(15);\n      i0.ɵɵtextInterpolate4(\"\\n        @Component(\", \"{\", \"\\n        selector: 'app-root', // the shell to render into\\n        templateUrl: '/app.component.html' // the template file to use.\\n        \", \"}\", \")\\n        export class AppComponent \", \"{\", \"\\n        \", \"}\", \"\\n    \");\n      i0.ɵɵadvance(20);\n      i0.ɵɵtextInterpolate4(\"\\n    // the-component.component.ts\\n    @Component(\", \"{\", \"\\n        templateUrl: './path-to-template.component.html',\\n        selector: 'app-root',\\n    \", \"}\", \")\\n    export class TheComponent \", \"{\", \"\\n        message = 'Some Message Value';\\n    \", \"}\", \"\\n    \");\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate2(\"\\n    <!-- the-component.component.html -->\\n    <h1>Page Title</h1>\\n    \", \"{{\", \"message\", \"}}\", \"\\n    \");\n      i0.ɵɵadvance(6);\n      i0.ɵɵtextInterpolate6(\"\\n    // the-component.component.ts\\n    @Component(\", \"{\", \"\\n        templateUrl: './the-component.component.html',\\n        selector: 'app-root',\\n    \", \"}\", \")\\n    export class TheComponent \", \"{\", \"\\n        favoriteFood = 'dragon fruit';\\n        randomFoods : string[] = [\\n            'pizza', 'cheeseburger', 'bison',\\n            'wild rice', 'peanut butter', 'pineapple',\\n        ];\\n\\n        updateMessage() : void \", \"{\", \"\\n            const randIdx = Math.ceil(Math.random() * this.randomFoods.length);\\n            this.favoriteFood = this.randomFoods[randIdx];\\n        \", \"}\", \"\\n    \", \"}\", \"\\n    \");\n      i0.ɵɵadvance(17);\n      i0.ɵɵtextInterpolate2(\"@NgModule(\", \"{\", \"...\", \"}\", \")\");\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolateV([\"\\n    import \", \"{\", \" AppComponent \", \"}\", \" from './app.component.ts';\\n    import \", \"{\", \" MyComponent \", \"}\", \" from './MyComponent/my-component.component.ts';\\n    import \", \"{\", \" RouterModule \", \"}\", \" from '@angular/router';\\n    // ...\\n\\n    @NgModule(\", \"{\", \"\\n        declarations: [\\n          AppComponent,\\n          MyComponent,\\n        ],\\n        imports: [\\n            RouterModule.forRoot([\\n              // my newly added route, it maps to component: MyComponent\\n              \", \"{\", \" path: 'my-component', component: MyComponent \", \"}\", \"\\n            ]),\\n        ],\\n        providers: [],\\n        bootstrap: [AppComponent]\\n    \", \"}\", \")\\n    export class AppModule \", \"{\", \"\", \"}\", \"\\n    \"]);\n    }\n  },\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["HomeComponent","constructor","log","items","length","forEach","item","window","console","selectors","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["/Users/bitstop/Projects/TestAngularASPProject/TestAngularASPProject/ClientApp/src/app/home/home.component.ts","/Users/bitstop/Projects/TestAngularASPProject/TestAngularASPProject/ClientApp/src/app/home/home.component.html"],"sourcesContent":["import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n})\nexport class HomeComponent {\n  items: string[] = ['a', 'b', 'c', 'd', 'e'];\n\n  constructor() {\n    this.log();\n  }\n\n  log(): void {\n    if (this.items.length) {\n      this.items.forEach(item => window.console.log(item));\n    }\n  }\n\n  \n}\n\n","<h1>Notes:</h1>\n<ol>\n    <!-- Day 1 -->\n    <li><a href=\"#home\">Hello, world</a></li>\n    <li><a href=\"#application-entry-point\">App entry-point</a></li>\n    <li><a href=\"#weatherforecast-controllers-classes\">Weatherforecast Controllers and Classes</a></li>\n    <li><a href=\"#angular-client-files\">Understanding the Angular Client App Files</a></li>\n    <li><a href=\"#typescript-intro\">Typescript Intro</a></li>\n    <li><a href=\"#typescript-decorators\">Typescript Decorators</a></li>\n    <li><a href=\"#custom-selectors\">Creating Custom Selectors</a></li>\n    <!-- Day 2 -->\n    <li><a href=\"#data-binding-basics\">Data-binding Basics</a></li>\n    <li><a href=\"#understanding-ngmodule\">Understanding <code>@NgModule</code> Decorator</a></li>\n</ol>\n\n<hr />\n\n<!-- #home -->\n<div id=\"home\" class=\"py-4\">\n    <h1>Hello, world!</h1>\n    <p>Welcome to your new single-page application, built with:</p>\n    <ul>\n        <li><a href='https://get.asp.net/'>ASP.NET Core</a> and <a href='https://msdn.microsoft.com/en-us/library/67ef8sbd.aspx'>C#</a> for cross-platform server-side code</li>\n        <li><a href='https://angular.io/'>Angular</a> and <a href='http://www.typescriptlang.org/'>TypeScript</a> for client-side code</li>\n        <li><a href='http://getbootstrap.com/'>Bootstrap</a> for layout and styling</li>\n    </ul>\n    <p>To help you get started, we've also set up:</p>\n    <ul>\n        <li><strong>Client-side navigation</strong>. For example, click <em>Counter</em> then <em>Back</em> to return here.</li>\n        <li><strong>Angular CLI integration</strong>. In development mode, there's no need to run <code>ng serve</code>. It runs in the background automatically, so your client-side resources are dynamically built on demand and the page refreshes when you modify any file.</li>\n        <li><strong>Efficient production builds</strong>. In production mode, development-time features are disabled, and your <code>dotnet publish</code> configuration automatically invokes <code>ng build</code> to produce minified, ahead-of-time compiled JavaScript files.</li>\n    </ul>\n    <p>The <code>ClientApp</code> subdirectory is a standard Angular CLI application. If you open a command prompt in that directory, you can run any <code>ng</code> command (e.g., <code>ng test</code>), or use <code>npm</code> to install extra packages into it.</p>\n</div>\n\n<hr />\n\n<!-- #application-entry-point -->\n<div id=\"application-entry-point\" class=\"py-4\">\n    <h1><code>Program.cs</code></h1>\n    <p>\n        This file basically serves as the configuration of the ASP.NET Core backend. The formal definition of the\n        significance of this file is as follows:\n    </p>\n    <p>\n        The <b>Program.cs</b> file in an ASP.NET Core Angular app is a central part of the application startup process.\n        It contains the code responsible for configuring and building the web app, as well as setting up the HTTP request\n        pipeline. Let's breakdown the significance of the code in this file in its barest form.\n    </p>\n    <code>var builder = WebApplication.CreateBuilder(args);</code>\n    <p>\n        This line creates a new <b>WebApplicationBuilder</b> instance using the <b>WebApplication.CreateBuilder</b> method.\n        The builder is used to configure and set up the application services, middleware and other components.\n    </p>\n    <code>builder.Services.AddControllersWithViews();</code>\n    <p>\n        This line adds services to MVC (Model-View-Controller) to the dependency injection container. It prepares\n        the app to handle controllers and views, which are essential for serving web pages and processing user requests.\n    </p>\n    <code>var app = builder.Build()</code>\n    <p>\n        This line builds the web application using the configuration and services defined in the builder container. It\n        creates an instance of <b>WebApplication</b> class, which represents the running web app.\n    </p>\n    <code class=\"break-lines\" ngPreserveWhitespaces>\n        if (!app.Environment.IsDevelopment())\n        {{'{'}}\n        app.useHsts();\n        {{'}'}}\n    </code>\n    <p>\n        This block of code checks wether the app is running in a non-development environment. If not in development,\n        the app forces HTTP Strict Transport Security (HSTS) by adding the <b>UseHsts</b> middleware. HSTS helps ensure secure\n        communication by telling browsers to only use HTTPS for future requests.\n    </p>\n    <code class=\"break-lines\" ngPreserveWhitespaces>\n        app.UseHttpsRedirection();\n        app.UseStaticFiles();\n        app.UseRouting();\n    </code>\n    <p>These lines of code add various middleware components to the HTTP request pipline:</p>\n    <ul>\n        <li><b>UseHttpsRedirection</b>: Redirects HTTP requests to HTTPS to ensure secure comms.</li>\n        <li>\n            <b>UseStaticFiles</b>: Enables the ability to serve static files (HTML, CSS, JS) from the <b>wwwroot</b>\n            directory.\n        </li>\n        <li><b>UseRouting</b>: Sets up routing for incoming requests based on URL paths.</li>\n    </ul>\n    <code class=\"break-lines\" ngPreserveWhitespaces>\n        app.MapControllerRoute(\n        name: \"default\",\n        pattern: \"{{'{'}}controller{{'}'}}/{{'{'}}action=Index{{'}'}}/{{'{'}}id?{{'}'}}\"\n        );\n    </code>\n    <p>\n        This line configures the default route for MVC controllers. It maps incoming requests to specific controller\n        actions based on the URL structure. The <b>default</b> route specifies that requests without explicit controller and\n        action segments should be routed to the <b>Index</b> action of the default controller.\n    </p>\n    <code>\n        app.MapFallbackToFile(\"index.html\");\n    </code>\n    <p>\n        This line sets up a fallback that serves the <b>index.html</b> file for all unmatched requests. This is especially\n        useful for SPAs like Angular apps, where the frontend handles routing internally. The <b>index.html</b> file usually\n        contains the Angular app and its logic.\n    </p>\n    <code>app.Run();</code>\n    <p>\n        This line starts the web application and enters the main event loop to listen for incoming requests and process them\n        based on the configured middleware pipeline.\n    </p>\n</div>\n\n<!-- #weatherforecase-controllers-classes -->\n<div id=\"weatherforecast-controllers-classes\" class=\"py-4\">\n    <h1>Weatherforecast Contollers and Classes</h1>\n    <p>\n        The HTML of the <a href=\"/fetch-data\">/fetch-data</a> page is rendered by Angular. The <code>WeatherForecast</code>\n        class is used by the contoller <code>WeatherForecastController#Get</code>. It is basically acting as a DTO.\n    </p>\n    <p>It is worth noting that there are two attributes to the <code>WeatherForecastController</code> class:</p>\n    <ul>\n        <li>\n            <code>[ApiController]</code>: For external usage, so that another project (like the angular client) can connect\n            to it.\n        </li>\n        <li><code>[Route(\"[controller]\")]</code></li>\n    </ul>\n    <p>\n        Note that the <a href=\"/fetch-data\">Fetch Data</a> and <a href=\"/counter\">Counter</a> pages are not shown in the <code>Pages</code> directory. Those pages are handled\n        by Angular and served from HTML files. When we created this project we essentially created the ASP.NET v7.0 back-end\n        server application and also the Angular front-end client application which lives in <code>ClientApp</code> folder.\n    </p>\n</div>\n\n<!-- #angular-client-files -->\n<div id=\"angular-client-files\" class=\"py-4\">\n    <h1>Understanding the Angular Client Files</h1>\n    <p>\n        <code>ClientApp/src</code> is where the Angular source code files for the client application live. The shell\n        container HTML is found in <code>ClientApp/src/index.html</code>. This is where everything is rendered, in this file\n        in the <code>app-root</code> element.\n    </p>\n</div>\n\n<!-- #typescript-intro -->\n<div id=\"typescript-intro\" class=\"py-4\">\n    <h1>Typescript Introduction</h1>\n    <p>\n        When analyzing the components of the Angular client application we begin to notice a few things. One of those\n        noticeable things is the fact that <code>ClientApp/src/app/home/home.component.ts</code> is a Typescript file. This\n        means that the home component is written in Typescript.\n    </p>\n\n    <p>\n        Angular uses Typescript by default for developing client applications. Typescript is transpiled to Javascript in\n        order to be interpretable by web browsers. Browsers by default run a Javascript engine. So they can interpret JS by default.\n    </p>\n\n    <p>\n        Javascript itself is a dynamically typed language. It checks for types at runtime. Typescript in the other-hand is\n        is a superset of Javascript featuring full type support and type safety/tooling. Typescript file extensions end in\n        <code>app.component<b>.ts</b></code>.\n    </p>\n\n    <p>Typescript was created by Microsoft and has similarities to C#. Example Typescript class:</p>\n    <code class=\"break-lines\" ngPreserveWhitespaces>\n        export class AppComponent {{'{'}}\n        title: string = 'app'; // type definition with default value (automatic type inference)\n        items = ['item1', 'item2', 'item3'];\n        {{'}'}}\n    </code>\n\n    <h1>Defining Methods in Typescript</h1>\n\n    <code class=\"break-lines\" ngPreserveWhitespaces>\n        export class AppComponent {{'{'}}\n        private log(text: string) {{'{'}} // methods are public in Typescript by default\n        // type definition is optional due to automatic type inference\n        var message: string = 'Message ' + text; // usage of parameter\n        {{'}'}}\n        {{'}'}}\n    </code>\n\n    <code class=\"break-lines\" ngPreserveWhitespaces>\n        var a: string\n        var b: number\n        var c: boolean\n    </code>\n    <p>Built in Typescript Primitive Types are number, string and boolean.</p>\n\n    <code>var app : AppComponent = new AppComponent();</code>\n    <p>You can also have variables of type class.</p>\n\n    <code class=\"break-lines\" ngPreserveWhitespaces>\n        var a : number[]\n        var b : string[]\n        var c : boolean[]\n        var app : AppComponent[]\n    </code>\n</div>\n\n<!-- #typescript-decorators -->\n<div id=\"typescript-decorators\" class=\"py-4\">\n    <h1>Typescript Decorators</h1>\n    <code class=\"break-lines\" ngPreserveWhitespaces>\n        @Component({{'{'}}\n        selector: 'app-root', // the shell to render into\n        templateUrl: '/app.component.html' // the template file to use.\n        {{'}'}})\n        export class AppComponent {{'{'}}\n        {{'}'}}\n    </code>\n\n    <p>\n        The above Typescript class has a component decorator. Angular uses Typescript decorators kind of like attributes in C#.\n    </p>\n</div>\n\n<!-- #custom-selectors -->\n<div id=\"custom-selectors\" class=\"py-4\">\n    <h1>Custom Selectors</h1>\n    <p>Angular lets you create custom selectors for use in your templates/components.</p>\n    <code class=\"break-lines\" ngPreserveWhitespaces>\n        body -> app-root -> [app-nav, container -> router-outlet]\n    </code>\n    <p>Angular is replacing the custom tag elements with the templates they point to.</p>\n</div>\n\n<!-- #data-binding-basics -->\n<div id=\"data-binding-basics\" class=\"py-4\">\n    <h1>Data-binding Basics</h1>\n    <p>There are two types of data-binding when working with Angular components:</p>\n    <h1>One-way Data-binding</h1>\n    <code class=\"break-lines\" ngPreserveWhitespaces>\n    // the-component.component.ts\n    @Component({{'{'}}\n        templateUrl: './path-to-template.component.html',\n        selector: 'app-root',\n    {{'}'}})\n    export class TheComponent {{'{'}}\n        message = 'Some Message Value';\n    {{'}'}}\n    </code>\n    <code class=\"code break-lines\" ngPreserveWhitespaces>\n    &lt;!-- the-component.component.html --&gt;\n    &lt;h1&gt;Page Title&lt;/h1&gt;\n    {{'{{'}}message{{'}}'}}\n    </code>\n    <p>We can define a property on the exported component class and then render it in the component's template HTML using double\n    curly braces.</p>\n\n    <h1>Event-binding</h1>\n    <code class=\"break-lines\" ngPreserveWhitespaces>\n    // the-component.component.ts\n    @Component({{'{'}}\n        templateUrl: './the-component.component.html',\n        selector: 'app-root',\n    {{'}'}})\n    export class TheComponent {{'{'}}\n        favoriteFood = 'dragon fruit';\n        randomFoods : string[] = [\n            'pizza', 'cheeseburger', 'bison',\n            'wild rice', 'peanut butter', 'pineapple',\n        ];\n\n        updateMessage() : void {{'{'}}\n            const randIdx = Math.ceil(Math.random() * this.randomFoods.length);\n            this.favoriteFood = this.randomFoods[randIdx];\n        {{'}'}}\n    {{'}'}}\n    </code>\n    <p>Here we see defined a public method <code>updateMessage</code> that changes the value of <code>favoriteFood</code> to random new value.</p>\n    <code class=\"break-lines\" ngPreserveWhitespaces>\n    &lt;!-- the-component.component.html --&gt;\n    &lt;h1&gt;Page Title&lt;/h1&gt;\n    &lt;button class=\"btn btn-primary\" (click)=\"updateMessage\"&gt;\n        Update Food\n    &lt;button/&gt;\n    </code>\n    <p>Here we see the event method bound to a button element on the template. When the event is triggered on the button element\n    the method is invoked.</p>\n</div>\n\n<div id=\"understanding-ngmodule\" class=\"py-4\">\n    <h1>Understanding <code>@NgModule({{'{'}}...{{'}'}})</code> Decorator</h1>\n\n    <code class=\"break-lines\" ngPreserveWhitespaces>\n    import {{'{'}} AppComponent {{'}'}} from './app.component.ts';\n    import {{'{'}} MyComponent {{'}'}} from './MyComponent/my-component.component.ts';\n    import {{'{'}} RouterModule {{'}'}} from '@angular/router';\n    // ...\n\n    @NgModule({{'{'}}\n        declarations: [\n          AppComponent,\n          MyComponent,\n        ],\n        imports: [\n            RouterModule.forRoot([\n              // my newly added route, it maps to component: MyComponent\n              {{'{'}} path: 'my-component', component: MyComponent {{'}'}}\n            ]),\n        ],\n        providers: [],\n        bootstrap: [AppComponent]\n    {{'}'}})\n    export class AppModule {{'{'}}{{'}'}}\n    </code>\n\n    <p>\n        There are several fields that can be used to configure and customize\n        the behavior of a module. The fields in this decorator provide control over\n        services, components and other features used in this decorator.\n    </p>\n\n    <ul>\n        <li>\n            <p class=\"mb-0\"><b>Declarations</b></p>\n            <p>Used to declare components, directives and pipes that belong to the module.\n            These declarations make items available for use within the module.</p>\n        </li>\n        <li>\n            <p class=\"mb-0\"><b>Imports</b></p>\n            <p>Specifies other modules who's exported components, directives, or services\n            are required by components in this module.</p>\n        </li>\n        <li>\n            <p class=\"mb-0\">Providers</p>\n            <p>Used to configure the dependency injection system with a list of services\n            that the module should provide. These services are made available throughout\n            the application.</p>\n        </li>\n        <li>\n            <p class=\"mb-0\"><b>Bootstrap</b></p>\n            <p></p>\n        </li>\n    </ul>\n\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}